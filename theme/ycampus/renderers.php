<?php

defined('MOODLE_INTERNAL') || die();
require_once($CFG->dirroot.'/course/renderer.php');
require_once($CFG->dirroot.'/course/format/topics/renderer.php');

class theme_ycampus_format_topics_renderer extends format_topics_renderer {

    /**
     * Generate the display of the header part of a section before
     * course modules are included
     *
     * @param stdClass $section The course_section entry from DB
     * @param stdClass $course The course entry from DB
     * @param bool $onsectionpage true if being printed on a single-section page
     * @param int $sectionreturn The section to return to after an action
     * @return string HTML to output.
     */
    protected function section_header($section, $course, $onsectionpage, $sectionreturn=null) {
        $o = '';
        $currenttext = '';
        $sectionstyle = '';

        if ($section->section != 0) {
            // Only in the non-general sections.
            if (!$section->visible) {
                $sectionstyle = ' hidden';
            }
            if (course_get_format($course)->is_section_current($section)) {
                $sectionstyle = ' current';
            }
        }

        $o .= html_writer::start_tag('li', [
            'id' => 'section-'.$section->section,
            'class' => 'section main clearfix col-lg-4 col-md-2'.$sectionstyle,
            'role' => 'region',
            'aria-labelledby' => "sectionid-{$section->id}-title",
            'data-sectionid' => $section->section,
            'data-sectionreturnid' => $sectionreturn
        ]);

        $leftcontent = $this->section_left_content($section, $course, $onsectionpage);
        $o.= html_writer::tag('div', $leftcontent, array('class' => 'left side'));

        $rightcontent = $this->section_right_content($section, $course, $onsectionpage);
        $o.= html_writer::tag('div', $rightcontent, array('class' => 'right side'));
        $o.= html_writer::start_tag('div', array('class' => 'content'));

        // When not on a section page, we display the section titles except the general section if null
        $hasnamenotsecpg = (!$onsectionpage && ($section->section != 0 || !is_null($section->name)));

        // When on a section page, we only display the general section title, if title is not the default one
        $hasnamesecpg = ($onsectionpage && ($section->section == 0 && !is_null($section->name)));

        $classes = ' accesshide';
        if ($hasnamenotsecpg || $hasnamesecpg) {
            $classes = '';
        }
        //$sectiontitle = get_section_name($course, $section);
        $sectionname = html_writer::tag('span', $this->section_title($section, $course));
        $o .= $this->output->heading($sectionname, 3, 'sectionname' . $classes, "sectionid-{$section->id}-title");

        $o .= $this->section_availability($section);

        $o .= html_writer::start_tag('div', array('class' => 'summary'));
        if ($section->uservisible || $section->visible) {
            // Show summary if section is available or has availability restriction information.
            // Do not show summary if section is hidden but we still display it because of course setting
            // "Hidden sections are shown in collapsed form".
            $o .= $this->format_summary_text($section);
        }
        $o .= html_writer::end_tag('div');

        return $o;
    }

    /**
     * Generate the starting container html for a list of sections.
     *
     * @return string HTML to output.
     */
    protected function start_section_list() {
        return html_writer::start_tag('div', array('class'=>'course-content')).html_writer::start_tag('ul', ['class' => 'topics row']);
    }
    protected function end_section_list(){
        $end_list = parent::end_section_list().html_writer::end_tag('div');
        if(empty($this->get_course_reviews())){
            return $end_list;
        }
        $end_list .= $this->render_from_template('theme_ycampus/reviews', $this->get_course_reviews()); // TODO: Change the autogenerated stub
        return $end_list;
    }

    protected function get_course_reviews(){
        global $DB;
        $id = 0;
        try {
            $id = optional_param('id', 0, PARAM_INT);
        } catch (coding_exception $e) {

        }
        $query = 'SELECT mdl_course_reviews.id, mdl_course_reviews.comment, mdl_course_reviews.rating, mdl_course_reviews.time_created, mdl_user.username, mdl_user.id AS user_id FROM `mdl_course_reviews` INNER JOIN mdl_user ON mdl_course_reviews.userid = mdl_user.id WHERE mdl_course_reviews.courseid = '.$id;

        $reviews = $DB->get_records_sql($query);


        foreach ($reviews as $review){
            $review->time_created = date('M d, Y', $review->time_created);
            $review->url = $CFG->wwwroot."/user/profile.php?id=".$review->user_id;
            $review->grey_block_count = array_fill(0, 5-$review->rating, 0);
            $review->gold_block_count = array_fill(0, $review->rating, 0);
        }

        return (object)[
            'reviews' => array_values($reviews)
        ];
    }
}
class theme_ycampus_core_course_renderer extends core_course_renderer {


    /**
     * Renders part of frontpage with a skip link (i.e. "My courses", "Site news", etc.)
     *
     * @param string $skipdivid
     * @param string $contentsdivid
     * @param string $header Header of the part
     * @param string $contents Contents of the part
     * @return string
     */
    protected function frontpage_part($skipdivid, $contentsdivid, $header, $contents) {
        global $CFG;

        if (strval($contents) === '') {
            return '';
        }
        $output = html_writer::link('#' . $skipdivid,
            get_string('skipa', 'access', core_text::strtolower(strip_tags($header))),
            array('class' => 'skip-block skip aabtn'));

        // Wrap frontpage part in div container.
        $output .= html_writer::start_tag('div', array('id' => $contentsdivid));
        //$output .= $this->heading($header);
        $output .= html_writer::tag('h4', 'Find a topic').'<br/>';

        $output .= $contents;

        // End frontpage part div container.
        $output .= html_writer::end_tag('div');

        $output .= html_writer::tag('span', '', array('class' => 'skip-block-to', 'id' => $skipdivid));
        $output .= $this->render_from_template('theme_ycampus/buildings-background', (object)['img-url'=>"$CFG->wwwroot./theme/ycampus/buildings.PNG"]);

        return $output;
    }

    /**
     * Returns HTML to display a tree of subcategories and courses in the given category
     *
     * @param coursecat_helper $chelper various display options
     * @param core_course_category $coursecat top category (this category's name and description will NOT be added to the tree)
     * @return string
     */
    protected function coursecat_tree(coursecat_helper $chelper, $coursecat) {

        global $DB, $CFG;

        $output = '';
        $img_path = $CFG->wwwroot.'/theme/ycampus/infocomm.png';

        $output .= html_writer::start_tag('div', array('class'=>'row'));

        $course_categories = $DB->get_records('course_categories', null, 'name');

        foreach ($course_categories as $category){
            $output .= html_writer::start_tag('div', array('class'=>'col-lg-2 col-md-4 col-sm-6'));
            $output .= html_writer::start_tag('div', array('class'=>'card category'));
            $output .= html_writer::start_tag('img', array('class'=>'card-img-top', 'src'=>$img_path, 'alt'=>'Card image')).html_writer::end_tag('img');
            $output .= html_writer::start_tag('div', array('class'=>'card-img-overlay'));
            $output .= html_writer::tag('p', $category->name, array('class'=>'card-text text-white'));
            $output .= html_writer::end_tag('div');
            $output .= html_writer::end_tag('div');
            $output .= html_writer::end_tag('div');
        }


        $output .= html_writer::end_tag('div');

        return $output;
    }


    /**
     * Output frontpage summary text and frontpage modules (stored as section 1 in site course)
     *
     * This may be disabled in settings
     *
     * @return string
     */
    public function frontpage_section1() {
        global $SITE, $USER;

        $output = '';
        $editing = $this->page->user_is_editing();

        if ($editing) {
            // Make sure section with number 1 exists.
            course_create_sections_if_missing($SITE, 1);
        }

        $modinfo = get_fast_modinfo($SITE);
        $section = $modinfo->get_section_info(1);
        if (($section && (!empty($modinfo->sections[1]) or !empty($section->summary))) or $editing) {
            $output .= $this->box_start('generalbox sitetopic');

            // If currently moving a file then show the current clipboard.
            if (ismoving($SITE->id)) {
                $stractivityclipboard = strip_tags(get_string('activityclipboard', '', $USER->activitycopyname));
                $output .= '<p><font size="2">';
                $cancelcopyurl = new moodle_url('/course/mod.php', ['cancelcopy' => 'true', 'sesskey' => sesskey()]);
                $output .= "$stractivityclipboard&nbsp;&nbsp;(" . html_writer::link($cancelcopyurl, get_string('cancel')) .')';
                $output .= '</font></p>';
            }

            $context = context_course::instance(SITEID);

            // If the section name is set we show it.
            if (trim($section->name) !== '') {
                $output .= $this->heading(
                    format_string($section->name, true, array('context' => $context)),
                    2,
                    'sectionname'
                );
            }

            $summarytext = file_rewrite_pluginfile_urls($section->summary,
                'pluginfile.php',
                $context->id,
                'course',
                'section',
                $section->id);
            $summaryformatoptions = new stdClass();
            $summaryformatoptions->noclean = true;
            $summaryformatoptions->overflowdiv = true;

            $output .= format_text($summarytext, $section->summaryformat, $summaryformatoptions);

            if ($editing && has_capability('moodle/course:update', $context)) {
                $streditsummary = get_string('editsummary');
                $editsectionurl = new moodle_url('/course/editsection.php', ['id' => $section->id]);
                $output .= html_writer::link($editsectionurl, $this->pix_icon('t/edit', $streditsummary)) .
                    "<br /><br />";
            }

            $output .= $this->course_section_cm_list($SITE, $section);

            $output .= $this->course_section_add_cm_control($SITE, $section->section);
            $output .= $this->box_end();
        }

        return $output;
    }
//"SELECT userid, fullname, mdl_course_categories.name FROM `mdl_user_enrolments` INNER JOIN mdl_enrol ON mdl_user_enrolments.enrolid = mdl_enrol.id INNER JOIN mdl_course ON mdl_enrol.courseid = mdl_course.id INNER JOIN mdl_course_categories ON mdl_course.category = mdl_course_categories.id WHERE mdl_course_categories.id = 1 AND mdl_user_enrolments.userid != 2"
}