<?php

defined('MOODLE_INTERNAL') || die();
require_once($CFG->dirroot.'/course/renderer.php');
require_once($CFG->dirroot.'/course/format/topics/renderer.php');

class theme_ycampus_format_topics_renderer extends format_topics_renderer {

    /**
     * Generate the display of the header part of a section before
     * course modules are included
     *
     * @param stdClass $section The course_section entry from DB
     * @param stdClass $course The course entry from DB
     * @param bool $onsectionpage true if being printed on a single-section page
     * @param int $sectionreturn The section to return to after an action
     * @return string HTML to output.
     */
    protected function section_header($section, $course, $onsectionpage, $sectionreturn=null) {

        $o = '';
        $sectionstyle = '';

        if ($section->section != 0) {
            // Only in the non-general sections.
            if (!$section->visible) {
                $sectionstyle = ' hidden';
            }
            if (course_get_format($course)->is_section_current($section)) {
                $sectionstyle = ' current';
            }
        }

        $o.= html_writer::start_tag('li', array('id' => 'section-'.$section->section,
            'class' => 'section main clearfix'.$sectionstyle.' list-group-item', 'role'=>'region',
            'aria-label'=> get_section_name($course, $section), 'style'=>'background: #fff; padding: 0'));

        // Create a span that contains the section title to be used to create the keyboard section move menu.
        $o .= html_writer::tag('span', get_section_name($course, $section), array('class' => 'hidden sectionname'));

        $leftcontent = $this->section_left_content($section, $course, $onsectionpage);
        $o.= html_writer::tag('div', $leftcontent, array('class' => 'left side'));

        $rightcontent = $this->section_right_content($section, $course, $onsectionpage);
        $o.= html_writer::tag('div', $rightcontent, array('class' => 'right side'));
        $o.= html_writer::start_tag('div', array('class' => 'content'));

        // When not on a section page, we display the section titles except the general section if null
        $hasnamenotsecpg = (!$onsectionpage && ($section->section != 0 || !is_null($section->name)));

        // When on a section page, we only display the general section title, if title is not the default one
        $hasnamesecpg = ($onsectionpage && ($section->section == 0 && !is_null($section->name)));

        $classes = ' accesshide';
        if ($hasnamenotsecpg || $hasnamesecpg) {
            $classes = '';
        }
        $sectionname = html_writer::tag('span', $this->section_title($section, $course));

        // Button format - ini
        if ($course->showdefaultsectionname) {
            $o.= $this->output->heading($sectionname, 3, 'sectionname' . $classes);
        }
        // Button format - end

        $o .= $this->section_availability($section);

        $o .= html_writer::start_tag('div', array('class' => 'summary'));
        if ($section->uservisible || $section->visible) {
            // Show summary if section is available or has availability restriction information.
            // Do not show summary if section is hidden but we still display it because of course setting
            // "Hidden sections are shown in collapsed form".
            $o .= $this->format_summary_text($section);
        }
        $o .= html_writer::end_tag('div');

        return $o;
    }

    /**
     * Generate the starting container html for a list of sections.
     *
     * @return string HTML to output.
     */
    protected function start_section_list() {
        return html_writer::start_tag('div', array('class'=>'course-content')).html_writer::start_tag('ul', ['class' => 'topics list-group']);
    }
    protected function end_section_list(){
        $end_list = parent::end_section_list().html_writer::end_tag('div');
        if(empty($this->get_course_reviews())){
            return $end_list;
        }
        //$this->output->box()
        $end_list .= $this->render_from_template('theme_ycampus/reviews', $this->get_course_reviews()); // TODO: Change the autogenerated stub
        return $end_list;
    }

    /**
     * Query db to get avg rating value
     *
     * @return array
     * @throws dml_exception
     * @throws coding_exception
     */
    private function get_average_rating_value(){
        global $DB;

        $id = optional_param('id', 0, PARAM_INT);
        $query = "SELECT ROUND(AVG(rating), 1) AS average_rating FROM {course_reviews} WHERE courseid = $id";
        $average_rating = $DB->get_records_sql($query);

        return $average_rating;

    }

    /**
     * Query db to get rating breakdown
     * @throws dml_exception
     * @throws coding_exception
     * @return array
     */
    private function get_rating_breakdown(){
        global $DB;

        $id = optional_param('id', 0, PARAM_INT);
        $query = "SELECT rating, COUNT(id) AS rating_count, (rating*20) AS percent FROM {course_reviews}  WHERE courseid = $id GROUP BY rating ORDER BY rating DESC";
        $rating_breakdown = $DB->get_records_sql($query);

        $count = count($rating_breakdown);

        while($count < 5){
            $obj = (object) new stdClass();
            $obj->rating = 5 - $count;
            $obj->rating_count = 0;
            $obj->percent = $obj->rating * 20;
            array_push($rating_breakdown, $obj);
            $count++;
        }

        return $rating_breakdown;
    }

    /**
     * Query db to get course reviews
     *
     * @return object
     */
    protected function get_course_reviews(){
        global $DB, $CFG;
        $id = 0;
        try {
            $id = optional_param('id', 0, PARAM_INT);
        } catch (coding_exception $e) {

        }
        $query = 'SELECT mdl_course_reviews.id, mdl_course_reviews.comment, mdl_course_reviews.rating, mdl_course_reviews.time_created, mdl_user.username, mdl_user.id AS user_id FROM `mdl_course_reviews` INNER JOIN mdl_user ON mdl_course_reviews.userid = mdl_user.id WHERE mdl_course_reviews.courseid = '.$id;

        $reviews = $DB->get_records_sql($query);


        foreach ($reviews as $review){
            $review->time_created = date('M d, Y', $review->time_created);
            $review->url = $CFG->wwwroot."/user/profile.php?id=".$review->user_id;
            $review->grey_block_count = array_fill(0, 5-$review->rating, 0);
            $review->gold_block_count = array_fill(0, $review->rating, 0);
        }

        $related_courses = $this->get_related_courses();
        $average_rating = $this->get_average_rating_value();
        $rating_breakdown = $this->get_rating_breakdown();


        return (object)[
            'reviews' => array_values($reviews),
            'average_ratings'=> array_values($average_rating),
            'rating_breakdowns' => array_values($rating_breakdown),
            'related_courses' => array_values($related_courses)
        ];
    }

    /**
     * Query db to get related courses for a course
     *
     * @return array
     */
    protected function get_related_courses(){
        global $DB, $USER;

        $helper = new course_image_helper();
        $course_id = optional_param('id', 0, PARAM_INT);
        $category_id = $this->get_course_category_id($course_id);
        $fields = "mdl_course.id, mdl_course.category, mdl_course.sortorder, fullname, shortname, mdl_course.idnumber, mdl_course.summary, summaryformat, mdl_course.format, mdl_course.showgrades, newsitems, startdate, enddate, relativedatesmode, marker, maxbytes, legacyfiles, showreports, mdl_course.visible, mdl_course.visibleold, groupmode, groupmodeforce, defaultgroupingid, lang, calendartype, mdl_course.theme, mdl_course.timecreated, mdl_course.timemodified, requested, enablecompletion, completionnotify, cacherev";
        $query = "SELECT $fields FROM {course} INNER JOIN mdl_course_categories ON mdl_course.category = mdl_course_categories.id INNER JOIN mdl_enrol ON mdl_course.id = mdl_enrol.courseid INNER JOIN mdl_user_enrolments ON mdl_enrol.id = mdl_user_enrolments.enrolid WHERE mdl_course_categories.id = $category_id AND mdl_user_enrolments.userid != $USER->id";
        $related_courses = $DB->get_records_sql($query);

        foreach ($related_courses as $related) {
            $related->img_url = $helper->course_image($related);
        }

        return $related_courses;
    }

    /**
     * Query db to get category id
     *
     * @return array
     */
    private function get_course_category_id($course_id){
        global $DB;

        $catid = 0;
        $category_query = "SELECT mdl_course_categories.id FROM {course_categories} INNER JOIN mdl_course ON mdl_course_categories.id = mdl_course.category WHERE mdl_course.id = $course_id";
        $category_id = $DB->get_records_sql($category_query);

        foreach ($category_id as $id){
            $catid = $id->id;
        }
        return $catid;
    }
}
class course_image_helper {

    /**
     * Get the image for a course if it exists
     *
     * @param object $course The course whose image we want
     * @return string|void
     */
    public function course_image($course) {
        global $CFG;

        $course = new core_course_list_element($course);
        $url = "";
        // Check to see if a file has been set on the course level.
        // Check to see if a file has been set on the course level.
        if ($course->id > 0 && $course->get_course_overviewfiles()) {
            foreach ($course->get_course_overviewfiles() as $file) {
                $isimage = $file->is_valid_image();
                $url = "$CFG->wwwroot/pluginfile.php".'/'. $file->get_contextid(). '/'. $file->get_component(). '/'.
                    $file->get_filearea(). $file->get_filepath(). $file->get_filename();
                if ($isimage) {
                    return $url;
                }
            }
        }
        $courseimagedefault = get_config('block_lw_courses', 'courseimagedefault');
        $url = $this->get_default_image_url($courseimagedefault);
        return $url;
    }

    /**
     * Build the Image url
     *
     * @param string $fileorfilename Name of the image
     * @return moodle_url|string
     */
    private function get_default_image_url($fileorfilename) {
        // If the fileorfilename param is a file.
        if ($fileorfilename instanceof stored_file) {
            // Separate each component of the url.
            $filecontextid  = $fileorfilename->get_contextid();
            $filecomponent  = $fileorfilename->get_component();
            $filearea       = $fileorfilename->get_filearea();
            $filepath       = $fileorfilename->get_filepath();
            $filename       = $fileorfilename->get_filename();

            // Generate a moodle url to the file.
            $url = new moodle_url("/pluginfile.php/{$filecontextid}/{$filecomponent}/{$filearea}/{$filepath}/{$filename}");

            // Return an img element containing the file.
            return $url;
        }

        // The fileorfilename param is not a stored_file object, assume this is the name of the file in the blocks file area.
        // Generate a moodle url to the file in the blocks file area.
        return new moodle_url("/pluginfile.php/1/block_lw_courses/courseimagedefault{$fileorfilename}");
    }

    /**
     * Build the headingImage url
     * @return moodle_url|string
     * @throws dml_exception
     */
    public function get_default_heading_image_url(){
        $courseimagedefault = get_config('block_lw_courses', 'courseimagedefault');
        $url = $this->get_default_image_url($courseimagedefault);
        return $url;
    }

}
class theme_ycampus_core_course_renderer extends core_course_renderer {

    /**
     * Renders part of frontpage with a skip link (i.e. "My courses", "Site news", etc.)
     *
     * @param string $skipdivid
     * @param string $contentsdivid
     * @param string $header Header of the part
     * @param string $contents Contents of the part
     * @return string
     */
    protected function frontpage_part($skipdivid, $contentsdivid, $header, $contents) {
        global $CFG;

        if (strval($contents) === '') {
            return '';
        }
        $output = html_writer::link('#' . $skipdivid,
            get_string('skipa', 'access', core_text::strtolower(strip_tags($header))),
            array('class' => 'skip-block skip aabtn'));

        // Wrap frontpage part in div container.
        $output .= html_writer::start_tag('div', array('id' => $contentsdivid));
        //$output .= $this->heading($header);
        $output .= html_writer::tag('h4', 'Find a topic').'<br/>';

        $output .= $contents;

        // End frontpage part div container.
        $output .= html_writer::end_tag('div');

        $output .= html_writer::tag('span', '', array('class' => 'skip-block-to', 'id' => $skipdivid));
        $output .= $this->render_from_template('theme_ycampus/buildings-background', (object)['img-url'=>"$CFG->wwwroot./theme/ycampus/buildings.PNG"]);

        return $output;
    }



    /**
     * Renders HTML to display one course module for display within a section.
     *
     * This function calls:
     * {@link core_course_renderer::course_section_cm()}
     *
     * @param stdClass $course
     * @param completion_info $completioninfo
     * @param cm_info $mod
     * @param int|null $sectionreturn
     * @param array $displayoptions
     * @return String
     */
    public function course_section_cm_list_item($course, &$completioninfo, cm_info $mod, $sectionreturn, $displayoptions = array()) {
        $output = '';
        if ($modulehtml = $this->course_section_cm($course, $completioninfo, $mod, $sectionreturn, $displayoptions)) {
            $modclasses = 'activity ' . $mod->modname . ' modtype_' . $mod->modname . ' ' . $mod->extraclasses;
            $output .= html_writer::tag('li', $modulehtml, array('class' => $modclasses, 'id' => 'module-' . $mod->id));
        }
        return $output;
    }

    /**
     * Renders HTML to display one course module in a course section
     *
     * This includes link, content, availability, completion info and additional information
     * that module type wants to display (i.e. number of unread forum posts)
     *
     * This function calls:
     * {@link core_course_renderer::course_section_cm_name()}
     * {@link core_course_renderer::course_section_cm_text()}
     * {@link core_course_renderer::course_section_cm_availability()}
     * {@link core_course_renderer::course_section_cm_completion()}
     * {@link course_get_cm_edit_actions()}
     * {@link core_course_renderer::course_section_cm_edit_actions()}
     *
     * @param stdClass $course
     * @param completion_info $completioninfo
     * @param cm_info $mod
     * @param int|null $sectionreturn
     * @param array $displayoptions
     * @return string
     */
    public function course_section_cm($course, &$completioninfo, cm_info $mod, $sectionreturn, $displayoptions = array()) {
        $output = '';
        // We return empty string (because course module will not be displayed at all)
        // if:
        // 1) The activity is not visible to users
        // and
        // 2) The 'availableinfo' is empty, i.e. the activity was
        //     hidden in a way that leaves no info, such as using the
        //     eye icon.
        if (!$mod->is_visible_on_course_page()) {
            return $output;
        }

        $indentclasses = 'mod-indent';
        if (!empty($mod->indent)) {
            $indentclasses .= ' mod-indent-'.$mod->indent;
            if ($mod->indent > 15) {
                $indentclasses .= ' mod-indent-huge';
            }
        }

        $output .= html_writer::start_tag('div');

        if ($this->page->user_is_editing()) {
            $output .= course_get_cm_move($mod, $sectionreturn);
        }

        $output .= html_writer::start_tag('div', array('class' => 'mod-indent-outer w-100'));

        // This div is used to indent the content.
        $output .= html_writer::div('', $indentclasses);

        // Start a wrapper for the actual content to keep the indentation consistent
        $output .= html_writer::start_tag('div');

        // Display the link to the module (or do nothing if module has no url)
        $cmname = $this->course_section_cm_name($mod, $displayoptions);

        if (!empty($cmname)) {
            // Start the div for the activity title, excluding the edit icons.
            $output .= html_writer::start_tag('div', array('class' => 'activityinstance'));
            $output .= $cmname;


            // Module can put text after the link (e.g. forum unread)
            $output .= $mod->afterlink;

            // Closing the tag which contains everything but edit icons. Content part of the module should not be part of this.
            $output .= html_writer::end_tag('div'); // .activityinstance
        }

        // If there is content but NO link (eg label), then display the
        // content here (BEFORE any icons). In this case cons must be
        // displayed after the content so that it makes more sense visually
        // and for accessibility reasons, e.g. if you have a one-line label
        // it should work similarly (at least in terms of ordering) to an
        // activity.
        $contentpart = $this->course_section_cm_text($mod, $displayoptions);
        $url = $mod->url;
        if (empty($url)) {
            $output .= $contentpart;
        }

        $modicons = '';
        if ($this->page->user_is_editing()) {
            $editactions = course_get_cm_edit_actions($mod, $mod->indent, $sectionreturn);
            $modicons .= ' '. $this->course_section_cm_edit_actions($editactions, $mod, $displayoptions);
            $modicons .= $mod->afterediticons;
        }

        $modicons .= $this->course_section_cm_completion($course, $completioninfo, $mod, $displayoptions);

        if (!empty($modicons)) {
            $output .= html_writer::div($modicons, 'actions');
        }

        // Show availability info (if module is not available).
        $output .= $this->course_section_cm_availability($mod, $displayoptions);

        // If there is content AND a link, then display the content here
        // (AFTER any icons). Otherwise it was displayed before
        if (!empty($url)) {
            $output .= $contentpart;
        }

        $output .= html_writer::end_tag('div'); // $indentclasses

        // End of indentation div.
        $output .= html_writer::end_tag('div');

        $output .= html_writer::end_tag('div');


        return $output;
    }

    /**
     * Renders html to display a name with the link to the course module on a course page
     *
     * If module is unavailable for user but still needs to be displayed
     * in the list, just the name is returned without a link
     *
     * Note, that for course modules that never have separate pages (i.e. labels)
     * this function return an empty string
     *
     * @param cm_info $mod
     * @param array $displayoptions
     * @return string
     */
    public function course_section_cm_name_title(cm_info $mod, $displayoptions = array()) {
        $output = '';
        $url = $mod->url;
        if (!$mod->is_visible_on_course_page() || !$url) {
            // Nothing to be displayed to the user.
            return $output;
        }

        //Accessibility: for files get description via icon, this is very ugly hack!
        $instancename = $mod->get_formatted_name();
        $altname = $mod->modfullname;
        // Avoid unnecessary duplication: if e.g. a forum name already
        // includes the word forum (or Forum, etc) then it is unhelpful
        // to include that in the accessible description that is added.
        if (false !== strpos(core_text::strtolower($instancename),
                core_text::strtolower($altname))) {
            $altname = '';
        }
        // File type after name, for alphabetic lists (screen reader).
        if ($altname) {
            $altname = get_accesshide(' '.$altname);
        }

        list($linkclasses, $textclasses) = $this->course_section_cm_classes($mod);

        // Get on-click attribute value if specified and decode the onclick - it
        // has already been encoded for display (puke).
        $onclick = htmlspecialchars_decode($mod->onclick, ENT_QUOTES);

        // Display link itself.
        $activitylink = html_writer::tag('span', $instancename . $altname, array('class' => 'instancename'));
        if ($mod->uservisible) {
            $output .= html_writer::link($url, $activitylink, array('class' => 'aalink' . $linkclasses, 'onclick' => $onclick));
        } else {
            // We may be displaying this just in order to show information
            // about visibility, without the actual link ($mod->is_visible_on_course_page()).
            $output .= html_writer::tag('div', $activitylink, array('class' => $textclasses));
        }
        return $output;
    }

    /**
     * Returns HTML to display a tree of subcategories and courses in the given category
     *
     * @param coursecat_helper $chelper various display options
     * @param core_course_category $coursecat top category (this category's name and description will NOT be added to the tree)
     * @return string
     * @throws moodle_exception
     */
    protected function coursecat_tree(coursecat_helper $chelper, $coursecat) {

        global $DB, $CFG;

        $output = '';
        $img_path = $CFG->wwwroot.'/theme/ycampus/infocomm.png';
        $course_cat_url = new moodle_url($CFG->wwwroot.'/course/index.php');

        $output .= html_writer::start_tag('div', array('class'=>'row'));

        $current_page = $this->page;

        if ($current_page->has_set_url()) {
            if ($current_page->url->get_param('categoryid') != null) {
                $id = optional_param('categoryid', 0, PARAM_INT);
                return $this->get_courses_by_category($id);
            }
        }

        $course_categories = $DB->get_records('course_categories', null, 'name');

        foreach ($course_categories as $category){
            $output .= html_writer::start_tag('div', array('class'=>'col-lg-2 col-md-4 col-sm-6'));
            $course_cat_url =  new moodle_url($CFG->wwwroot.'/course/index.php', array('categoryid'=>$category->id));
            $output .= html_writer::start_tag('a', array('href'=>$course_cat_url));
            $output .= html_writer::start_tag('div', array('class'=>'card category'));
            $output .= html_writer::start_tag('img', array('class'=>'card-img-top', 'src'=>$img_path, 'alt'=>'Card image')).html_writer::end_tag('img');
            $output .= html_writer::start_tag('div', array('class'=>'card-img-overlay'));
            $output .= html_writer::tag('p', $category->name, array('class'=>'card-text text-white'));
            $output .= html_writer::end_tag('div');
            $output .= html_writer::end_tag('div');
            $output .= html_writer::end_tag('a');
            $output .= html_writer::end_tag('div');
        }


        $output .= html_writer::end_tag('div');

        return $output;
    }



    /**
     * Displays courses under a category
     *
     * @param int $category_id
     * @return string
     */

    private function get_courses_by_category($category_id){
        global $DB, $CFG;

        $courses = $DB->get_records('course', array('category'=>$category_id), 'shortname');
        $output = '';
        $helper = new course_image_helper();

        if(count($courses) == 0){
            $output .= html_writer::start_tag('div', array('class'=>'alert alert-warning'));
            $output .= html_writer::tag('strong', 'No courses to show');
            $output .= '<br/>Currently, there are no courses under this category';
            $output .= html_writer::end_tag('div');
            return $output;
        }

        $output .= html_writer::start_tag('ul', array('class'=>'list-group'));
        foreach ($courses as $course) {
            $url = new moodle_url($CFG->wwwroot.'/course/view.php', ['id'=>$course->id]);
            $output .= html_writer::start_tag('a', array('href'=>$url));
            $image = $helper->course_image($course);
            $output .= html_writer::start_tag('li', array('class'=>'list-group-item', 'id'=>'course-card-list'));
            $output .= html_writer::start_tag('div', array('class'=>'card'));
            $output .= html_writer::start_tag('img', array('class'=>'card-img-top', 'src'=>$image, 'alt'=>'Card image')).html_writer::end_tag('img');
            $output .= html_writer::start_tag('div', array('class'=>'card-img-overlay'));
            $output .= html_writer::tag('h3', $course->fullname, array('class'=>'card-text text-white'));
            $output .= html_writer::end_tag('div');
            $output .= html_writer::end_tag('div');
            $output .= html_writer::end_tag('li');
            $output .= html_writer::end_tag('a');
        }
        $output .= html_writer::end_tag('ul');
        return $output;
    }

}

class theme_ycampus_core_renderer extends core_renderer{

    /**
     * Wrapper for header elements.
     *
     * @return string HTML to display the main header.
     * @throws moodle_exception
     */
    public function full_header() {
        global $DB, $CFG;

        if ($this->page->include_region_main_settings_in_header_actions() &&
            !$this->page->blocks->is_block_present('settings')) {
            // Only include the region main settings if the page has requested it and it doesn't already have
            // the settings block on it. The region main settings are included in the settings block and
            // duplicating the content causes behat failures.
            $this->page->add_header_action(html_writer::div(
                $this->region_main_settings_menu(),
                'd-print-none',
                ['id' => 'region-main-settings-menu']
            ));
        }

        $header = new stdClass();
        $header->settingsmenu = $this->context_header_settings_menu();
        $header->contextheader = $this->context_header();
        $header->hasnavbar = empty($this->page->layout_options['nonavbar']);
        $header->navbar = $this->navbar();
        $header->pageheadingbutton = $this->page_heading_button();
        $header->courseheader = $this->course_header();
        $header->headeractions = $this->page->get_header_actions();

        $image_helper = new course_image_helper();
        $course_id = optional_param('id', 0, PARAM_INT);

        $course = $DB->get_record('course', array('id'=>$course_id));
        $current_page_url = $this->page->url;
        $course_page_url = new moodle_url($CFG->wwwroot.'/course/view.php');

        if($course_id == 0 || empty($course) || $course_page_url->compare($current_page_url) == false){
            $header->img_url = $image_helper->get_default_heading_image_url();
            return $this->render_from_template('core/full_header', $header);
        }
        $image = $image_helper->course_image($course);

        $header->img_url = $image;
        return $this->render_from_template('core/full_header', $header);
    }

    /**
     * Outputs a box.
     *
     * @param string $contents The contents of the box
     * @param string $classes A space-separated list of CSS classes
     * @param string $id An optional ID
     * @param array $attributes An array of other attributes to give the box.
     * @return string the HTML to output.
     */
    public function box($contents, $classes = 'generalbox', $id = null, $attributes = array()) {
        global $CFG;

        $mod_page_url = new moodle_url($CFG->wwwroot.'/mod/page/view.php');
        $current_page_url = $this->page->url;

        if($mod_page_url->compare($current_page_url, URL_MATCH_PARAMS) == false){
            return parent::box($contents, $classes, $id, $attributes);
        }
        $output = '';
        $output .= $this->box_start($classes, $id, $attributes);
        $output .= html_writer::start_tag('div', array('class'=>'col-lg-8 col-md-6 col-sm-12'));
        $output .= $contents;
        $output .= html_writer::end_tag('div');
        $output .= $this->generate_form();
        $output .= $this->box_end();

        return $output;
    }

    private function generate_form(){
        $output = '';
        $data = (object)[];
        $output .= html_writer::start_tag('div', array('class'=>'col-lg-4 col-md-6 col-sm-12', 'style'=>'padding-top: 20px'));
        $output .= $this->render_from_template('theme_ycampus/note-input', $data);
        $output .= html_writer::end_tag('div');

        return $output;
    }

    /**
     * Outputs the opening section of a box.
     *
     * @param string $classes A space-separated list of CSS classes
     * @param string $id An optional ID
     * @param array $attributes An array of other attributes to give the box.
     * @return string the HTML to output.
     */
    public function box_start($classes = 'generalbox', $id = null, $attributes = array()) {
        $this->opencontainers->push('box', html_writer::end_tag('div'));
        $attributes['id'] = $id;
        $attributes['class'] = 'box py-3 ' . renderer_base::prepare_classes($classes).' row';
        return html_writer::start_tag('div', $attributes);
    }

    /**
     * Outputs the closing section of a box.
     *
     * @return string the HTML to output.
     */
    public function box_end() {
        return $this->opencontainers->pop('box');
    }


}
