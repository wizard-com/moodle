<?php

defined('MOODLE_INTERNAL') || die();
require_once($CFG->dirroot.'/course/renderer.php');
require_once($CFG->dirroot.'/course/format/topics/renderer.php');

class theme_ycampus_format_topics_renderer extends format_topics_renderer {

    /**
     * Generate the display of the header part of a section before
     * course modules are included
     *
     * @param stdClass $section The course_section entry from DB
     * @param stdClass $course The course entry from DB
     * @param bool $onsectionpage true if being printed on a single-section page
     * @param int $sectionreturn The section to return to after an action
     * @return string HTML to output.
     */
    protected function section_header($section, $course, $onsectionpage, $sectionreturn=null) {

        $o = '';
        $sectionstyle = '';

        if ($section->section != 0) {
            // Only in the non-general sections.
            if (!$section->visible) {
                $sectionstyle = ' hidden';
            }
            if (course_get_format($course)->is_section_current($section)) {
                $sectionstyle = ' current';
            }
        }

        $o.= html_writer::start_tag('li', array('id' => 'section-'.$section->section,
            'class' => 'section main clearfix'.$sectionstyle.' list-group-item', 'role'=>'region',
            'aria-label'=> get_section_name($course, $section), 'style'=>'background: #fff; padding: 0'));

        // Create a span that contains the section title to be used to create the keyboard section move menu.
        $o .= html_writer::tag('span', get_section_name($course, $section), array('class' => 'hidden sectionname'));

        $leftcontent = $this->section_left_content($section, $course, $onsectionpage);
        $o.= html_writer::tag('div', $leftcontent, array('class' => 'left side'));

        $rightcontent = $this->section_right_content($section, $course, $onsectionpage);
        $o.= html_writer::tag('div', $rightcontent, array('class' => 'right side'));
        $o.= html_writer::start_tag('div', array('class' => 'content'));

        // When not on a section page, we display the section titles except the general section if null
        $hasnamenotsecpg = (!$onsectionpage && ($section->section != 0 || !is_null($section->name)));

        // When on a section page, we only display the general section title, if title is not the default one
        $hasnamesecpg = ($onsectionpage && ($section->section == 0 && !is_null($section->name)));

        $classes = ' accesshide';
        if ($hasnamenotsecpg || $hasnamesecpg) {
            $classes = '';
        }
        $sectionname = html_writer::tag('span', $this->section_title($section, $course));

        // Button format - ini
        if ($course->showdefaultsectionname) {
            $o.= $this->output->heading($sectionname, 3, 'sectionname' . $classes);
        }
        // Button format - end

        $o .= $this->section_availability($section);

        $o .= html_writer::start_tag('div', array('class' => 'summary'));
        if ($section->uservisible || $section->visible) {
            // Show summary if section is available or has availability restriction information.
            // Do not show summary if section is hidden but we still display it because of course setting
            // "Hidden sections are shown in collapsed form".
            $o .= $this->format_summary_text($section);
        }
        $o .= html_writer::end_tag('div');

        return $o;
    }

    /**
     * Generate the starting container html for a list of sections.
     *
     * @return string HTML to output.
     */
    protected function start_section_list() {
        return html_writer::start_tag('div', array('class'=>'course-content')).html_writer::start_tag('ul', ['class' => 'topics list-group']);
    }
    protected function end_section_list(){
        $end_list = parent::end_section_list().html_writer::end_tag('div');
        $course_reviews = get_course_reviews();
        if(empty($course_reviews)){
            return $end_list;
        }
        //$this->output->box()
        $end_list .= $this->render_from_template('theme_ycampus/reviews', $course_reviews); // TODO: Change the autogenerated stub
        return $end_list;
    }

}
class theme_ycampus_core_course_renderer extends core_course_renderer {

    /**
     * Renders part of frontpage with a skip link (i.e. "My courses", "Site news", etc.)
     *
     * @param string $skipdivid
     * @param string $contentsdivid
     * @param string $header Header of the part
     * @param string $contents Contents of the part
     * @return string
     */
    protected function frontpage_part($skipdivid, $contentsdivid, $header, $contents) {
        global $CFG;

        if (strval($contents) === '') {
            return '';
        }
        $popular_courses_content = html_writer::start_tag('div', ['id'=>'demo1', 'class'=>'carousel slide', 'data-ride'=>'carousel']);
        $popular_courses_content .= html_writer::start_tag('div', ['class'=>'carousel-inner container-fluid']);
        $popular_courses = get_popular_courses();
        $total = count($popular_courses);
        $row_count = intval($total/3)+1;
        if($total % 3 == 0){
            $row_count = $total/3;
        }
        $active = ' active';
        for($i = 0; $i < $row_count; $i++){
            $content = '';
            $content .= html_writer::start_tag('div', array('class'=>'carousel-item row row-equal'.$active));
            $sub_array = array_slice($popular_courses, $i*3, 3);
            foreach($sub_array as $item){
                $content .= html_writer::start_tag('div', array('class'=>'col-lg-4 col-md-4 col-sm-6'));
                $course_url =  new moodle_url($CFG->wwwroot.'/course/view.php', array('id'=>$item->id));
                $content .= html_writer::start_tag('a', array('href'=>$course_url));
                $content .= html_writer::start_tag('div', array('class'=>'card popular'));
                $content .= html_writer::start_tag('img', array('src'=>$item->img_url, 'alt'=>'card image', 'class'=>'card-img-top popular-img-height popular-course-img')).html_writer::end_tag('img');
                $content .= html_writer::start_tag('div', array('class'=>'card-img-overlay darken'));
                $content .= html_writer::tag('h4', $item->fullname, array('class'=>'card-title text-white'));
                $content .= html_writer::end_tag('div');
                $content .= html_writer::end_tag('div');
                $content .= html_writer::end_tag('a');
                $content .= html_writer::end_tag('div');
            }
            $content .= html_writer::end_tag('div');
            $popular_courses_content .= $content;

            if($active == ' active'){
                $active = '';
            }

        }

        $popular_courses_content .= html_writer::end_tag('div');
        if($row_count > 1){
            $span_prev = html_writer::tag('span', '', ['class'=>'carousel-control-prev-icon']);
            $span_next = html_writer::tag('span', '', ['class'=>'carousel-control-next-icon']);
            $popular_courses_content .= html_writer::link('#demo1', $span_prev, ['class'=>'carousel-control-prev','data-slide'=>'prev']);
            $popular_courses_content .= html_writer::link('#demo1', $span_next, ['class'=>'carousel-control-next','data-slide'=>'next']);
        }
        $popular_courses_content .= html_writer::end_tag('div');

        $output = html_writer::link('#' . $skipdivid, get_string('skipa', 'access', core_text::strtolower(strip_tags($header))), array('class' => 'skip-block skip aabtn'));
        // Wrap frontpage part in div container.
        $output .= html_writer::start_tag('div', array('id' => $contentsdivid));
        //$output .= $this->heading($header);
        $output .= html_writer::tag('h4', 'Find a topic').'<br/>';

        $output .= $contents;

        // End frontpage part div container.
        $output .= html_writer::end_tag('div');

        $output .= html_writer::tag('span', '', array('class' => 'skip-block-to', 'id' => $skipdivid));
        $output .= $this->render_from_template('theme_ycampus/buildings-background', ['popular_courses'=>$popular_courses_content,'root'=>$CFG->wwwroot]);

        return $output;
    }

    /**
     * Returns HTML to display a tree of subcategories and courses in the given category
     *
     * @param coursecat_helper $chelper various display options
     * @param core_course_category $coursecat top category (this category's name and description will NOT be added to the tree)
     * @return string
     * @throws moodle_exception
     */
    protected function coursecat_tree(coursecat_helper $chelper, $coursecat) {

        global $DB, $CFG;

        $output = '';
        $course_cat_url = new moodle_url($CFG->wwwroot.'/course/index.php');

        $current_page = $this->page;

        if ($current_page->has_set_url()) {
            if ($current_page->url->get_param('categoryid') != null) {
                $id = optional_param('categoryid', 0, PARAM_INT);
                return $this->get_courses_by_category($id);
            }
        }
        $output .= html_writer::start_tag('div', ['id'=>'demo0', 'class'=>'carousel slide', 'data-ride'=>'carousel']);
        $output .= html_writer::start_tag('div', ['class'=>'carousel-inner container-fluid']);

        $course_categories = get_course_categories();
        $total = count($course_categories);
        $row_count = intval($total/3)+1;
        if($total % 3 == 0){
            $row_count = $total/3;
        }
        $active = ' active';
        for($i = 0; $i < $row_count; $i++){
            $content = '';
            $content .= html_writer::start_tag('div', array('class'=>'carousel-item row row-equal'.$active));
            $sub_array = array_slice($course_categories, $i*3, 3);
            foreach($sub_array as $item){
                $filearea = "coursecat".$item->id;
                $url = get_course_cat_img_url($filearea);
                $course_cat_url =  new moodle_url($CFG->wwwroot.'/course/index.php', array('categoryid'=>$item->id));
                $content .= html_writer::start_tag('div', array('class'=>'col-lg-4 col-md-4 col-sm-6'));
                $content .= html_writer::start_tag('a', array('href'=>$course_cat_url));
                $content .= html_writer::start_tag('div', array('class'=>'card category'));
                $content .= html_writer::start_tag('img', array('src'=>$url, 'alt'=>'card image', 'class'=>'card-img-top cat-img-height course-cat-img')).html_writer::end_tag('img');
                $content .= html_writer::start_tag('div', array('class'=>'card-img-overlay darken'));
                $content .= html_writer::tag('h4', $item->name, array('class'=>'card-title text-white'));
                $content .= html_writer::end_tag('div');
                $content .= html_writer::end_tag('div');
                $content .= html_writer::end_tag('a');
                $content .= html_writer::end_tag('div');
            }
            $content .= html_writer::end_tag('div');
            $output .= $content;

            if($active == ' active'){
                $active = '';
            }

        }

        $output .= html_writer::end_tag('div');
        if($row_count > 1){
            $output .= $this->render_control_buttons(0);
        }
        $output .= html_writer::end_tag('div');

        return $output;
    }

    /**
     * Construct contents of lw_courses block
     * @param array $courses list of courses in sorted order
     * @param int $id
     * @return string html to be displayed in lw_courses block
     */
    public function lw_courses($courses, $id) {

        $output = '';

        $courseordernumber = 0;
        $total = count($courses);


        $output .= html_writer::start_div('carousel slide lw_courses_list', array('id'=>"demo$id", 'data-ride'=>'carousel'));
        $output .= html_writer::start_div('carousel-inner container-fluid');

        $row_count = intval($total/3)+1;

        if($total % 3 == 0){
            $row_count = $total/3;
        }

        $active = ' active';
        for($i = 0; $i < $row_count; $i++){
            $content = '';
            $content .= html_writer::start_tag('div', array('class'=>'carousel-item row row-equal'.$active));
            $sub_array = array_slice($courses, $i*3, 3);
            $length = count($sub_array);
            $colwidth = 12 / $length;


            foreach ($sub_array as $key => $course) {

                $content .= $this->output->box_start(
                    "coursebox col-lg-$colwidth col-md-6 col-sm-6 col-12",
                    "course-{$course->id}");
                $url = course_image($course);
                $content .= html_writer::div('', 'course_image_embed',
                    array("style" => 'background-image:url('.$url.'); background-size:cover'));

                $content .= html_writer::start_tag('div', array('class' => 'course_title'));
                // No need to pass title through s() here as it will be done automatically by html_writer.
                $attributes = array('class' => 'title', 'style' => 'color: #fff');
                if ($course->id > 0) {
                    $courseurl = new moodle_url('/course/view.php', array('id' => $course->id));
                    $coursefullname = format_string(get_course_display_name_for_list($course), true, $course->id);
                    $content .= html_writer::link($courseurl, $coursefullname, $attributes);
                }
                $content .= $this->output->box('', 'flush');
                $content .= html_writer::end_tag('div');

                if ($course->id > 0) {
                    $content .= course_description($course);

                }
                if(empty($course->theme)){
                    $content .= build_progress($course);
                }

                $content .= $this->output->box('', 'flush');
                $content .= $this->output->box_end();
                $courseordernumber++;

            }
            $content .= html_writer::end_tag('div');
            $output .= $content;

            if($active == ' active'){
                $active = '';
            }

        }

        // Wrap course list in a div and return.
        $output .= html_writer::end_div();
        if($row_count > 1){
            $output .= $this->render_control_buttons($id);
        }
        $output .= html_writer::end_div();
        return $output;
    }


    /**
     * Construct prev and next buttons for slideshow
     * @param int $id
     * @return string html of the buttons
     */
    private function render_control_buttons($id){
        $output = '';
        $span_prev = html_writer::tag('span', '', ['class'=>'carousel-control-prev-icon']);
        $span_next = html_writer::tag('span', '', ['class'=>'carousel-control-next-icon']);
        $output .= html_writer::link('#demo'.$id, $span_prev, ['class'=>'carousel-control-prev','data-slide'=>'prev']);
        $output .= html_writer::link('#demo'.$id, $span_next, ['class'=>'carousel-control-next','data-slide'=>'next']);

        return $output;
    }

    /**
     * Renders HTML to display one course module for display within a section.
     *
     * This function calls:
     * {@link core_course_renderer::course_section_cm()}
     *
     * @param stdClass $course
     * @param completion_info $completioninfo
     * @param cm_info $mod
     * @param int|null $sectionreturn
     * @param array $displayoptions
     * @return String
     */
    public function course_section_cm_list_item($course, &$completioninfo, cm_info $mod, $sectionreturn, $displayoptions = array()) {
        $output = '';
        if ($modulehtml = $this->course_section_cm($course, $completioninfo, $mod, $sectionreturn, $displayoptions)) {
            $modclasses = 'activity ' . $mod->modname . ' modtype_' . $mod->modname . ' ' . $mod->extraclasses;
            $output .= html_writer::tag('li', $modulehtml, array('class' => $modclasses, 'id' => 'module-' . $mod->id));
        }
        return $output;
    }

    /**
     * Renders HTML to display one course module in a course section
     *
     * This includes link, content, availability, completion info and additional information
     * that module type wants to display (i.e. number of unread forum posts)
     *
     * This function calls:
     * {@link core_course_renderer::course_section_cm_name()}
     * {@link core_course_renderer::course_section_cm_text()}
     * {@link core_course_renderer::course_section_cm_availability()}
     * {@link core_course_renderer::course_section_cm_completion()}
     * {@link course_get_cm_edit_actions()}
     * {@link core_course_renderer::course_section_cm_edit_actions()}
     *
     * @param stdClass $course
     * @param completion_info $completioninfo
     * @param cm_info $mod
     * @param int|null $sectionreturn
     * @param array $displayoptions
     * @return string
     */
    public function course_section_cm($course, &$completioninfo, cm_info $mod, $sectionreturn, $displayoptions = array()) {
        $output = '';
        // We return empty string (because course module will not be displayed at all)
        // if:
        // 1) The activity is not visible to users
        // and
        // 2) The 'availableinfo' is empty, i.e. the activity was
        //     hidden in a way that leaves no info, such as using the
        //     eye icon.
        if (!$mod->is_visible_on_course_page()) {
            return $output;
        }

        $indentclasses = 'mod-indent';
        if (!empty($mod->indent)) {
            $indentclasses .= ' mod-indent-'.$mod->indent;
            if ($mod->indent > 15) {
                $indentclasses .= ' mod-indent-huge';
            }
        }

        $output .= html_writer::start_tag('div');

        if ($this->page->user_is_editing()) {
            $output .= course_get_cm_move($mod, $sectionreturn);
        }

        $output .= html_writer::start_tag('div', array('class' => 'mod-indent-outer w-100'));

        // This div is used to indent the content.
        $output .= html_writer::div('', $indentclasses);

        // Start a wrapper for the actual content to keep the indentation consistent
        $output .= html_writer::start_tag('div');

        // Display the link to the module (or do nothing if module has no url)
        $cmname = $this->course_section_cm_name($mod, $displayoptions);

        if (!empty($cmname)) {
            // Start the div for the activity title, excluding the edit icons.
            $output .= html_writer::start_tag('div', array('class' => 'activityinstance'));
            $output .= $cmname;


            // Module can put text after the link (e.g. forum unread)
            $output .= $mod->afterlink;

            // Closing the tag which contains everything but edit icons. Content part of the module should not be part of this.
            $output .= html_writer::end_tag('div'); // .activityinstance
        }

        // If there is content but NO link (eg label), then display the
        // content here (BEFORE any icons). In this case cons must be
        // displayed after the content so that it makes more sense visually
        // and for accessibility reasons, e.g. if you have a one-line label
        // it should work similarly (at least in terms of ordering) to an
        // activity.
        $contentpart = $this->course_section_cm_text($mod, $displayoptions);
        $url = $mod->url;
        if (empty($url)) {
            $output .= $contentpart;
        }

        $modicons = '';
        if ($this->page->user_is_editing()) {
            $editactions = course_get_cm_edit_actions($mod, $mod->indent, $sectionreturn);
            $modicons .= ' '. $this->course_section_cm_edit_actions($editactions, $mod, $displayoptions);
            $modicons .= $mod->afterediticons;
        }

        $modicons .= $this->course_section_cm_completion($course, $completioninfo, $mod, $displayoptions);

        if (!empty($modicons)) {
            $output .= html_writer::div($modicons, 'actions');
        }

        // Show availability info (if module is not available).
        $output .= $this->course_section_cm_availability($mod, $displayoptions);

        // If there is content AND a link, then display the content here
        // (AFTER any icons). Otherwise it was displayed before
        if (!empty($url)) {
            $output .= $contentpart;
        }

        $output .= html_writer::end_tag('div'); // $indentclasses

        // End of indentation div.
        $output .= html_writer::end_tag('div');

        $output .= html_writer::end_tag('div');


        return $output;
    }

    /**
     * Renders html to display a name with the link to the course module on a course page
     *
     * If module is unavailable for user but still needs to be displayed
     * in the list, just the name is returned without a link
     *
     * Note, that for course modules that never have separate pages (i.e. labels)
     * this function return an empty string
     *
     * @param cm_info $mod
     * @param array $displayoptions
     * @return string
     */
    public function course_section_cm_name_title(cm_info $mod, $displayoptions = array()) {
        $output = '';
        $url = $mod->url;
        if (!$mod->is_visible_on_course_page() || !$url) {
            // Nothing to be displayed to the user.
            return $output;
        }

        //Accessibility: for files get description via icon, this is very ugly hack!
        $instancename = $mod->get_formatted_name();
        $altname = $mod->modfullname;
        // Avoid unnecessary duplication: if e.g. a forum name already
        // includes the word forum (or Forum, etc) then it is unhelpful
        // to include that in the accessible description that is added.
        if (false !== strpos(core_text::strtolower($instancename),
                core_text::strtolower($altname))) {
            $altname = '';
        }
        // File type after name, for alphabetic lists (screen reader).
        if ($altname) {
            $altname = get_accesshide(' '.$altname);
        }

        list($linkclasses, $textclasses) = $this->course_section_cm_classes($mod);

        // Get on-click attribute value if specified and decode the onclick - it
        // has already been encoded for display (puke).
        $onclick = htmlspecialchars_decode($mod->onclick, ENT_QUOTES);

        // Display link itself.
        $activitylink = html_writer::tag('span', $instancename . $altname, array('class' => 'instancename'));
        if ($mod->uservisible) {
            $output .= html_writer::link($url, $activitylink, array('class' => 'aalink' . $linkclasses, 'onclick' => $onclick));
        } else {
            // We may be displaying this just in order to show information
            // about visibility, without the actual link ($mod->is_visible_on_course_page()).
            $output .= html_writer::tag('div', $activitylink, array('class' => $textclasses));
        }
        return $output;
    }


    /**
     * Displays courses under a category
     *
     * @param int $category_id
     * @return string
     */

    private function get_courses_by_category($category_id){
        global $DB, $CFG;

        $courses = $DB->get_records('course', array('category'=>$category_id), 'shortname');
        $output = '';

        if(count($courses) == 0){
            $output .= html_writer::start_tag('div', array('class'=>'alert alert-warning'));
            $output .= html_writer::tag('strong', 'No courses to show');
            $output .= '<br/>Currently, there are no courses under this category';
            $output .= html_writer::end_tag('div');
            return $output;
        }

        $output .= html_writer::start_tag('ul', array('class'=>'list-group'));
        foreach ($courses as $course) {
            $url = new moodle_url($CFG->wwwroot.'/course/view.php', ['id'=>$course->id]);
            $output .= html_writer::start_tag('a', array('href'=>$url));
            $image = course_image($course);
            $output .= html_writer::start_tag('li', array('class'=>'list-group-item', 'id'=>'course-card-list'));
            $output .= html_writer::start_tag('div', array('class'=>'card'));
            $output .= html_writer::start_tag('img', array('class'=>'card-img-top', 'src'=>$image, 'alt'=>'Card image')).html_writer::end_tag('img');
            $output .= html_writer::start_tag('div', array('class'=>'card-img-overlay'));
            $output .= html_writer::tag('h3', $course->fullname, array('class'=>'card-text text-white'));
            $output .= html_writer::end_tag('div');
            $output .= html_writer::end_tag('div');
            $output .= html_writer::end_tag('li');
            $output .= html_writer::end_tag('a');
        }
        $output .= html_writer::end_tag('ul');
        return $output;
    }

}

class theme_ycampus_core_renderer extends core_renderer{


    /**
     * Returns standard main content placeholder.
     * Designed to be called in theme layout.php files.
     *
     * @return string HTML fragment.
     */
    public function main_content() {
        // This is here because it is the only place we can inject the "main" role over the entire main content area
        // without requiring all theme's to manually do it, and without creating yet another thing people need to
        // remember in the theme.
        // This is an unfortunate hack. DO NO EVER add anything more here.
        // DO NOT add classes.
        // DO NOT add an id.
        return '<div role="main">'.$this->unique_main_content_token.'</div>';
    }


    /**
     * Wrapper for header elements.
     *
     * @return string HTML to display the main header.
     * @throws moodle_exception
     */
    public function full_header() {
        global $DB, $CFG;

        if ($this->page->include_region_main_settings_in_header_actions() &&
            !$this->page->blocks->is_block_present('settings')) {
            // Only include the region main settings if the page has requested it and it doesn't already have
            // the settings block on it. The region main settings are included in the settings block and
            // duplicating the content causes behat failures.
            $this->page->add_header_action(html_writer::div(
                $this->region_main_settings_menu(),
                'd-print-none',
                ['id' => 'region-main-settings-menu']
            ));
        }

        $header = new stdClass();
        $header->settingsmenu = $this->context_header_settings_menu();
        $header->contextheader = $this->context_header();
        $header->hasnavbar = empty($this->page->layout_options['nonavbar']);
        $header->navbar = $this->navbar();
        $header->pageheadingbutton = $this->page_heading_button();
        $header->courseheader = $this->course_header();
        $header->headeractions = $this->page->get_header_actions();

        $course_id = optional_param('id', 0, PARAM_INT);

        if($course_id == 0){
            $header->img_url = get_default_heading_image_url();
            return $this->render_from_template('core/full_header', $header);
        }

        $course = $DB->get_record('course', array('id'=>$course_id));

        $current_context = $this->page->context->contextlevel;

        if($current_context == CONTEXT_COURSE && empty($course) == false) {
            $image = course_image($course);
            $header->img_url = $image;
        }
        else if($current_context == CONTEXT_MODULE) {
            $mod_id = optional_param('id', 0, PARAM_INT);
            $course_id_by_mod = $DB->get_record('course_modules', array('id' => $mod_id), 'course');
            $course_for_mod = $DB->get_record('course', array('id' => $course_id_by_mod->course));
            $image = course_image($course_for_mod);
            $header->img_url = $image;
        }
        else {
                $header->img_url = get_default_heading_image_url();
        }
        return $this->render_from_template('core/full_header', $header);

    }

    /**
     * Outputs a box.
     *
     * @param string $contents The contents of the box
     * @param string $classes A space-separated list of CSS classes
     * @param string $id An optional ID
     * @param array $attributes An array of other attributes to give the box.
     * @return string the HTML to output.
     */
    public function box($contents, $classes = 'generalbox', $id = null, $attributes = array()) {
        global $CFG;

        $current_context = $this->page->context->contextlevel;

        if($current_context == CONTEXT_MODULE){
            $output = '';
            $output .= $this->box_start($classes, $id, $attributes);
            $output .= html_writer::start_tag('div', array('class'=>'col-lg-8 col-md-6 col-sm-12'));
            $output .= $contents;
            $output .= html_writer::end_tag('div');
            $output .= $this->generate_form();
            $output .= $this->box_end();

            return $output;
        }
        return parent::box($contents, $classes, $id, $attributes);
    }

    private function generate_form(){

        try {
            $data = get_notes();
            $userid_and_modid = get_current_user_and_mod();
            $output = '';
            $output .= html_writer::start_tag('div', array('class'=>'col-lg-4 col-md-6 col-sm-12', 'style'=>'padding-top: 20px'));
            $output .= $this->render_from_template('theme_ycampus/note-input', ['notes'=>$data, $userid_and_modid]);
            $output .= html_writer::end_tag('div');

            return $output;

        } catch (coding_exception $e) {

        } catch (dml_exception $e) {
        }
        return '';
    }

    /**
     * Outputs the opening section of a box.
     *
     * @param string $classes A space-separated list of CSS classes
     * @param string $id An optional ID
     * @param array $attributes An array of other attributes to give the box.
     * @return string the HTML to output.
     */
    public function box_start($classes = 'generalbox', $id = null, $attributes = array()) {
        $this->opencontainers->push('box', html_writer::end_tag('div'));
        $attributes['id'] = $id;
        $attributes['class'] = 'box py-3 ' . renderer_base::prepare_classes($classes).' row';
        return html_writer::start_tag('div', $attributes);
    }

    /**
     * Outputs the closing section of a box.
     *
     * @return string the HTML to output.
     */
    public function box_end() {
        return $this->opencontainers->pop('box');
    }

    /**
     * Returns standard navigation between activities in a course.
     *
     * @return string the navigation HTML.
     */
    public function activity_navigation() {
        // First we should check if we want to add navigation.
        $context = $this->page->context;
        if (($this->page->pagelayout !== 'incourse' && $this->page->pagelayout !== 'frametop')
            || $context->contextlevel != CONTEXT_MODULE) {
            return '';
        }

        // If the activity is in stealth mode, show no links.
        if ($this->page->cm->is_stealth()) {
            return '';
        }

        $id = optional_param('id', 0, PARAM_INT);

        // Get a list of all the activities in the course.
        $course = $this->page->cm->get_course();
        $modules = get_fast_modinfo($course->id)->get_cms();


        // Put the modules into an array in order by the position they are shown in the course.
        $mods = [];
        $activitylist = [];
        $mod_no = 1;
        $total = count($modules);
        $percent = 0;
        $width = 100;

        foreach ($modules as $module) {
            // Only add activities the user can access, aren't in stealth mode and have a url (eg. mod_label does not).
            if (!$module->uservisible || $module->is_stealth() || empty($module->url)) {
                continue;
            }
            $mods[$module->id] = $module;

            // Module name.
            $modname = $module->get_formatted_name();
            // Display the hidden text if necessary.
            if (!$module->visible) {
                $modname .= ' ' . get_string('hiddenwithbrackets');
            }
            // Module URL.
            $linkurl = new moodle_url($module->url);

            if($mod_no == 1){
                $percent = 3.2;
            }
            else if($mod_no == $total){
                $percent = 94;
            }
            else{
                $percent = 90.8 * (($mod_no-1)/($total-1));
            }

            if($id == $module->id){
                if($mod_no == $total){
                    $width = 100;
                }
                else {
                    $width = $percent + ($mod_no-1);
                }
            }
            // Add module URL (as key) and name (as value) to the activity list array.
            $value = ['link'=>$linkurl->out(false), 'name'=>$modname, 'mod_no'=>$mod_no, 'percent'=>$percent];
            array_push($activitylist, $value);
            $mod_no++;
        }

        $nummods = count($mods);

        // If there is only one mod then do nothing.
        if ($nummods == 1) {
            return '';
        }

        return $this->render_from_template('core_course/activity_navigation', ['activitylist'=>array_values($activitylist), 'width'=>$width]);
    }

}
