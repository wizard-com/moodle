<?php

defined('MOODLE_INTERNAL') || die();
require_once($CFG->dirroot.'/course/renderer.php');
require_once($CFG->dirroot.'/course/format/topics/renderer.php');

class theme_ycampus_format_topics_renderer extends format_topics_renderer {

    /**
     * Generate the display of the header part of a section before
     * course modules are included
     *
     * @param stdClass $section The course_section entry from DB
     * @param stdClass $course The course entry from DB
     * @param bool $onsectionpage true if being printed on a single-section page
     * @param int $sectionreturn The section to return to after an action
     * @return string HTML to output.
     */
    protected function section_header($section, $course, $onsectionpage, $sectionreturn=null) {
        $o = '';
        $currenttext = '';
        $sectionstyle = '';

        if ($section->section != 0) {
            // Only in the non-general sections.
            if (!$section->visible) {
                $sectionstyle = ' hidden';
            }
            if (course_get_format($course)->is_section_current($section)) {
                $sectionstyle = ' current';
            }
        }

        $o .= html_writer::start_tag('li', [
            'id' => 'section-'.$section->section,
            'class' => 'section main clearfix col-lg-4 col-md-2'.$sectionstyle,
            'role' => 'region',
            'aria-labelledby' => "sectionid-{$section->id}-title",
            'data-sectionid' => $section->section,
            'data-sectionreturnid' => $sectionreturn
        ]);

        $leftcontent = $this->section_left_content($section, $course, $onsectionpage);
        $o.= html_writer::tag('div', $leftcontent, array('class' => 'left side'));

        $rightcontent = $this->section_right_content($section, $course, $onsectionpage);
        $o.= html_writer::tag('div', $rightcontent, array('class' => 'right side'));
        $o.= html_writer::start_tag('div', array('class' => 'content'));

        // When not on a section page, we display the section titles except the general section if null
        $hasnamenotsecpg = (!$onsectionpage && ($section->section != 0 || !is_null($section->name)));

        // When on a section page, we only display the general section title, if title is not the default one
        $hasnamesecpg = ($onsectionpage && ($section->section == 0 && !is_null($section->name)));

        $classes = ' accesshide';
        if ($hasnamenotsecpg || $hasnamesecpg) {
            $classes = '';
        }
        //$sectiontitle = get_section_name($course, $section);
        $sectionname = html_writer::tag('span', $this->section_title($section, $course));
        $o .= $this->output->heading($sectionname, 3, 'sectionname' . $classes, "sectionid-{$section->id}-title");

        $o .= $this->section_availability($section);

        $o .= html_writer::start_tag('div', array('class' => 'summary'));
        if ($section->uservisible || $section->visible) {
            // Show summary if section is available or has availability restriction information.
            // Do not show summary if section is hidden but we still display it because of course setting
            // "Hidden sections are shown in collapsed form".
            $o .= $this->format_summary_text($section);
        }
        $o .= html_writer::end_tag('div');

        return $o;
    }

    /**
     * Generate the starting container html for a list of sections.
     *
     * @return string HTML to output.
     */
    protected function start_section_list() {
        return html_writer::start_tag('div', array('class'=>'course-content')).html_writer::start_tag('ul', ['class' => 'topics row']);
    }
    protected function end_section_list(){
        if(empty($this->get_course_reviews())){
            return parent::end_section_list().html_writer::end_tag('div');
        }
        return parent::end_section_list().html_writer::end_tag('div').$this->render_from_template('theme_ycampus/reviews', $this->get_course_reviews()); // TODO: Change the autogenerated stub
    }

    protected function get_course_reviews(){
        global $DB;
        $id = 0;
        try {
            $id = optional_param('id', 0, PARAM_INT);
        } catch (coding_exception $e) {

        }
        $query = 'SELECT mdl_course_reviews.id, mdl_course_reviews.comment, mdl_course_reviews.rating, mdl_course_reviews.time_created, mdl_user.username, mdl_user.id AS user_id FROM `mdl_course_reviews` INNER JOIN mdl_user ON mdl_course_reviews.userid = mdl_user.id WHERE mdl_course_reviews.courseid = '.$id;

        $reviews = $DB->get_records_sql($query);


        foreach ($reviews as $review){
            $review->time_created = date('M d, Y', $review->time_created);
            $review->url = $CFG->wwwroot."/user/profile.php?id=".$review->user_id;
            $review->grey_block_count = array_fill(0, 5-$review->rating, 0);
            $review->gold_block_count = array_fill(0, $review->rating, 0);
        }

        return (object)[
            'reviews' => array_values($reviews)
        ];
    }
}
class theme_ycampus_core_course_renderer extends core_course_renderer {

    /**
     * Returns HTML to print tree of course categories (with number of courses) for the frontpage
     *
     * @return string
     */
    public function frontpage_categories_list() {
        global $CFG;
        // TODO MDL-10965 improve.
        $tree = core_course_category::top();
        if (!$tree->get_children_count()) {
            return '';
        }
        $chelper = new coursecat_helper();
        $chelper->set_subcat_depth($CFG->maxcategorydepth)->
        set_show_courses(self::COURSECAT_SHOW_COURSES_COUNT)->
        set_categories_display_options(array(
            'limit' => $CFG->coursesperpage,
            'viewmoreurl' => new moodle_url('/course/index.php',
                array('browse' => 'categories', 'page' => 1))
        ))->
        set_attributes(array('class' => 'frontpage-category-names'));
        return $this->coursecat_tree($chelper, $tree);
    }

    /**
     * Returns HTML to display a tree of subcategories and courses in the given category
     *
     * @param coursecat_helper $chelper various display options
     * @param core_course_category $coursecat top category (this category's name and description will NOT be added to the tree)
     * @return string
     */
    protected function coursecat_tree(coursecat_helper $chelper, $coursecat) {

        global $DB, $CFG;

        $output = '';
        $img_path = $CFG->wwwroot.'/theme/ycampus/infocomm.png';

        $output .= html_writer::start_tag('div', array('class'=>'row'));

        $course_categories = $DB->get_records('course_categories');

        foreach ($course_categories as $category){
            $output .= html_writer::start_tag('div', array('class'=>'col-lg-2 col-md-4'));
            $output .= html_writer::start_tag('div', array('class'=>'card'));
            $output .= html_writer::start_tag('img', array('class'=>'card-img-top', 'src'=>$img_path, 'alt'=>'Card image')).html_writer::end_tag('img');
            $output .= html_writer::start_tag('div', array('class'=>'card-img-overlay'));
            $output .= html_writer::tag('p', $category->name, array('class'=>'card-text text-white'));
            $output .= html_writer::end_tag('div');
            $output .= html_writer::end_tag('div');
            $output .= html_writer::end_tag('div');
        }


        $output .= html_writer::end_tag('div');

        return $output;
    }


}