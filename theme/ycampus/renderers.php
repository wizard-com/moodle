<?php

defined('MOODLE_INTERNAL') || die();
require_once($CFG->dirroot.'/course/renderer.php');
require_once($CFG->dirroot.'/course/format/topics/renderer.php');

class theme_ycampus_format_topics_renderer extends format_topics_renderer {

    /**
     * Generate the display of the header part of a section before
     * course modules are included
     *
     * @param stdClass $section The course_section entry from DB
     * @param stdClass $course The course entry from DB
     * @param bool $onsectionpage true if being printed on a single-section page
     * @param int $sectionreturn The section to return to after an action
     * @return string HTML to output.
     */
    protected function section_header($section, $course, $onsectionpage, $sectionreturn=null) {
        $o = '';
        $currenttext = '';
        $sectionstyle = '';

        if ($section->section != 0) {
            // Only in the non-general sections.
            if (!$section->visible) {
                $sectionstyle = ' hidden';
            }
            if (course_get_format($course)->is_section_current($section)) {
                $sectionstyle = ' current';
            }
        }

        $o .= html_writer::start_tag('li', [
            'id' => 'section-'.$section->section,
            'class' => 'section main clearfix col-lg-4 col-md-2'.$sectionstyle,
            'role' => 'region',
            'aria-labelledby' => "sectionid-{$section->id}-title",
            'data-sectionid' => $section->section,
            'data-sectionreturnid' => $sectionreturn
        ]);

        $leftcontent = $this->section_left_content($section, $course, $onsectionpage);
        $o.= html_writer::tag('div', $leftcontent, array('class' => 'left side'));

        $rightcontent = $this->section_right_content($section, $course, $onsectionpage);
        $o.= html_writer::tag('div', $rightcontent, array('class' => 'right side'));
        $o.= html_writer::start_tag('div', array('class' => 'content'));

        // When not on a section page, we display the section titles except the general section if null
        $hasnamenotsecpg = (!$onsectionpage && ($section->section != 0 || !is_null($section->name)));

        // When on a section page, we only display the general section title, if title is not the default one
        $hasnamesecpg = ($onsectionpage && ($section->section == 0 && !is_null($section->name)));

        $classes = ' accesshide';
        if ($hasnamenotsecpg || $hasnamesecpg) {
            $classes = '';
        }
        //$sectiontitle = get_section_name($course, $section);
        $sectionname = html_writer::tag('span', $this->section_title($section, $course));
        $o .= $this->output->heading($sectionname, 3, 'sectionname' . $classes, "sectionid-{$section->id}-title");

        $o .= $this->section_availability($section);

        $o .= html_writer::start_tag('div', array('class' => 'summary'));
        if ($section->uservisible || $section->visible) {
            // Show summary if section is available or has availability restriction information.
            // Do not show summary if section is hidden but we still display it because of course setting
            // "Hidden sections are shown in collapsed form".
            $o .= $this->format_summary_text($section);
        }
        $o .= html_writer::end_tag('div');

        return $o;
    }

    /**
     * Generate the starting container html for a list of sections.
     *
     * @return string HTML to output.
     */
    protected function start_section_list() {
        return html_writer::start_tag('div', array('class'=>'course-content')).html_writer::start_tag('ul', ['class' => 'topics row']);
    }
    protected function end_section_list(){
        if(empty($this->get_course_reviews())){
            return parent::end_section_list().html_writer::end_tag('div');
        }
        return parent::end_section_list().html_writer::end_tag('div').$this->render_from_template('theme_ycampus/reviews', $this->get_course_reviews()); // TODO: Change the autogenerated stub
    }

    protected function get_course_reviews(){
        global $DB;
        $id = 0;
        try {
            $id = optional_param('id', 0, PARAM_INT);
        } catch (coding_exception $e) {

        }
        $query = 'SELECT mdl_course_reviews.id, mdl_course_reviews.comment, mdl_course_reviews.rating, mdl_course_reviews.time_created, mdl_user.username, mdl_user.id AS user_id FROM `mdl_course_reviews` INNER JOIN mdl_user ON mdl_course_reviews.userid = mdl_user.id WHERE mdl_course_reviews.courseid = '.$id;

        $reviews = $DB->get_records_sql($query);


        foreach ($reviews as $review){
            $review->time_created = date('M d, Y', $review->time_created);
            $review->url = $CFG->wwwroot."/user/profile.php?id=".$review->user_id;
            $review->grey_block_count = array_fill(0, 5-$review->rating, 0);
            $review->gold_block_count = array_fill(0, $review->rating, 0);
        }

        return (object)[
            'reviews' => array_values($reviews)
        ];
    }
}
class theme_ycampus_core_course_renderer extends core_course_renderer {
    /**
     * Returns HTML to print list of available courses for the frontpage
     *
     * @return string
     */
    public function frontpage_available_courses() {
        global $CFG, $PAGE, $DB;

        $html = '';
        // LearningWorks.
        $PAGE->requires->js(new moodle_url($CFG->wwwroot.'/blocks/lw_courses/js/custom.js'));
        $config = get_config('block_lw_courses');
        $categories = $DB->get_records('course_categories');

        // LearningWorks.
        $gridsplit = intval(12 / count($categories)); // Added intval to avoid any float.

        // Set a minimum size for the course 'cards'.
        $colsize = intval($config->coursegridwidth) > 0 ? intval($config->coursegridwidth) : BLOCKS_LW_COURSES_DEFAULT_COL_SIZE;
        if ($gridsplit < $colsize) {
            $gridsplit = $colsize;
        }

        $courseclass = $config->startgrid == BLOCKS_LW_COURSES_STARTGRID_YES ? "grid" : "list";
        $startvalue = $courseclass == "list" ? "12" : $gridsplit;

       // $html .= html_writer::start_tag('section', array('class'=>'block lw_courses_block card mb-3'))
        $html .= html_writer::start_tag('div', array('class'=>'card-body p3'));
        $html .= html_writer::start_tag('div', array('class'=>'card-text content mt-3'));

        $listonly = false;
        if ($gridsplit == 12) {
            $listonly = true;
            $startvalue = 12;
            $courseclass = "list";
        } else {
            $html .= html_writer::tag('a', 'Change View', array('href' => '#', 'id' => 'box-or-lines',
                'styles' => '', 'class' => "$courseclass col-md-$startvalue span$startvalue $courseclass"));
        }
        $html .= html_writer::tag('div', '', array("class" => "hidden startgrid $courseclass", "grid-size" => $gridsplit));
        $html .= html_writer::div('', 'box flush');

        $html .= html_writer::start_div('lw_courses_list');
        $html .= html_writer::start_tag('div', array('class'=>"box py-3 coursebox $courseclass span$startvalue col-md-$startvalue $courseclass col-xs-12"));

        foreach ($categories as $category){
            $html .= $category->name;
        }
        $html .= html_writer::end_tag('div');
        // Wrap course list in a div and return.
        $html .= html_writer::end_div();

        $html .= html_writer::end_tag('div');
        $html .= html_writer::end_tag('div');
        return $html;
    }
}